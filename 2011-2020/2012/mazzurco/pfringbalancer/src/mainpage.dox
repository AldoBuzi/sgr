/**
 * @mainpage


@section introduction Introduzione
Balanced PF_RING Dispatcher e' un software di bilanciamento coerente di traffico di rete pensato per analizzatori di traffico ma perfettamente utilizzabile anche per altri scopi.@n
Grazie all'utilizzo dei socket PF_RING e di tecniche di hashing a basso costo computazionale e' in grado di funzionare anche su reti ad alto traffico, senza l'utilizzo di costose architetture proprietarie.@n
Il caso d'uso piu' comune e' installarlo su una macchina che riceve il traffico di rete su un'interfaccia ( per brevita' ifIN ) e lo smista in modo coerente verso altre macchine che effettueranno l'analisi vera e propria attraverso N interfacce in uscita ( per brevita' ifOUT1 ... ifOUTN), la scelta dell'interfaccia di uscita sara' effettuata in modo da non inficiare l'integrita' dei flussi di rete e da bilanciare il piu' possibile il carico sulle interfacce in uscita.


@section usage Utilizzo
Per distribuire il traffico ricevuto sull'interfaccia ifIN verso le interfacce ifOUT1, ifOUT2, ifOUT3 basta avviare il programma nel modo seguente
@code
pfringbalancer -i ifIN -o ifOUT1 -o ifOUT2 -o ifOUT3
@endcode
Possiamo anche scegliere tra le varie modalita' di dispatching se lo riteniamo necessario, la scelta di default e' il dispatching basato solo sull'ip sorgente e quello destinazione, in questo modo pacchetti appartenenti a connessioni diverse ma generati dagli stessi host usciranno dalla stessa interfaccia, se invece si desidera uno smistamento a grana piu' fine quindi a livello di flussi specifici possiamo aggiungere l'opzione "-m 1"
@code
pfringbalancer -i ifIN -o ifOUT1 -o ifOUT2 -o ifOUT3 -m 1
@endcode


@section build Compilazione
@code
cmake .
make
@endcode


@section working Funzionamento Generale
Il flusso d'esecuzione principale del programma consiste del parsing e verifica dei parametri in ingresso, contestualmente al parsing vengono inizializzate le interfacce in uscita, qual'ora ci fossero delle opzioni scorrette il programma libera le risorse gia' allocate stampa un messaggio di aiuto ed esce, se invece tutto va bene viene aperto il socket pf_ring sull'interfaccia in ingresso e comincia il loop di dispatching dei pacchetti, qual'ora il programma ricevesse un segnale di terminazione chiude le interfacce libera le risorse e termina, il diagramma sottostante riassume il flusso di esecuzione.
@image html main.png
La chiamata al metodo BPFRD::PacketDispatcher::dispatch interna al loop
@code
dsp.dispatch( (char *) buffer, &hdr);
@endcode
Racchiude al suo interno tutto il processo di dispatching di un pacchetto, ho scelto di non avviare thread paralleli per ciascun pacchetto per evitare i costi di sincronizzazione per l'accesso a strutture condivise ( per esempio la lista delle interfacce in uscita ), essendo comunque l'arrivo dei pacchetti sequenziale e l'obbiettivo la velocita' di smistamento, ho puntato sul velocizzare il piu' possibile l'operazione di dispatching invece che sull'eseguire piu' dispatching contemporaneamente ( che perde di senso dato l'esiguo costo di dispatching ).
@image html dispatch.png


@section implementation Scelte implementative

@subsection programming_language Linguaggio di programmazione
Ho scelto C++ perche' permette di usare il paradigma di programmazione ad oggetti che mi ha facilitato molto nella strutturazione del programma con ottime prestazioni simili al C.

@subsection documentation Strumento di Documentazione
Ho scelto Doxygen perche' permette di scrivere la documentazione in linea e facilita la manutenibilita' e comprensibilita' del codice.

@subsection performances Prestazioni
Visto lo scopo del software ho scelto di ottimizzare ove possibile il codice, soprattutto le parti che vengono eseguite per ogni pacchetto da smistare.


@section optimizations Ottimizzazioni
Le ottimizzazioni di seguito trattate non sono in ordine di impatto.

@subsection inlining Inlining Funzioni
Per diminuire il piu' possibile i tempi di chiamata delle funzioni, ho scelto di dichiarare inline e scrivere in modo piu' compatto e ottimizzato possibile tutte le funzioni per cui fosse opportuno.

@subsection hashing Hashing
Il codice relativo all'hashing e' quello in cui le ottimizzazioni hanno un impatto maggiore.

@par Invocazione funzione di hashing selezionata
Invece di effettuare la scelta della funzione di hashing corretta tramite un if o un case ho preferito assegnare un puntatore a funzione nel costruttore di BPFRD::PacketDispatcher e usare quest'ultimo per invocare la funzione corretta in base alla scelta dell'utente, in questo modo qual'ora in futuro si aumentassero le modalita' di hashing disponibili il numero di cicli di clock per invocare la giusta funzione rimarrebbe costante.

@par Tabella Hash
Per accedere in tempo costante ai flussi vengono immagazzinati in una tabella hash, la gestione delle collisioni non e' necessaria per i nostri fini, tuttavia per poter ottimizzare pesantemente la funzione hash la tabella deve avere una dimensione potenza di 2.

@par Funzioni Hash
Essendo la tabella hash di dimensione potenza di 2 e non essendo necessarie garanzie stringenti sulle proprieta' della funzioni hash se non per il fatto che pacchetti di uno stesso flusso abbiano lo stesso hash ho potuto realizzarle componendo operatori base molto semplici e veloci quali xor bit a bit e somma, oltre a questo ogni riga di codice e' stata ponderata ed e' stato impiegato ogni possibile accorgimento per ottimizzare la funzione e diminuire la quantita' di codice assembler generato.@n
Calcolo rapido dell'hash di un pacchetto IPv6:
@code
struct ip6_hdr * ip6hdr = (ip6_hdr *)buffer + sizeof(ether_header);
hash  = ip6hdr->ip6_src.s6_addr32[0] ^ ip6hdr->ip6_dst.s6_addr32[0];
hash += ip6hdr->ip6_src.s6_addr32[1] ^ ip6hdr->ip6_dst.s6_addr32[1];
hash += ip6hdr->ip6_src.s6_addr32[2] ^ ip6hdr->ip6_dst.s6_addr32[2];
hash += ip6hdr->ip6_src.s6_addr32[3] ^ ip6hdr->ip6_dst.s6_addr32[3];
@endcode
Gestione compatta di pacchetti incapsulati VLAN
@code
case ETHERTYPE_VLAN:
{
        buffer += 4;
        minAcceptableLen += 4;
        eth_type = buffer[16];
        eth_type <<= 8;
        eth_type += buffer[17];
        goto switch_ether;
}
@endcode

@subsection code_substitution Sostituzione del Codice
Grazie alle macro di C/C++ e' possibile sostituire il codice a compile time, ho utilizzato questa feature per far @a sparire codice di debugging e di param checking in modo da ottimizzare ulteriormete le prestazioni, le opzioni da abilitare per far @a riapparire il codice sono specificare nel file CMakeLists.txt e sono CMAKE_BUILD_TYPE=Debug, BPFRD_DEBUG_LEVEL=x, BPFRD_FUNC_PARAMS_CHECKING.
 */
